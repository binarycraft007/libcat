name: tests

on: [push, pull_request]

env:
  CAT_SLE: 1

jobs:
  win-tests:
    name: Test on ${{matrix.os}} build-type ${{matrix.build-type}}
    runs-on: ${{matrix.os}}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ "windows-latest" ]
        build-type: [ "Debug", "Release" ]
        #build-type: [ "Debug" ]
      max-parallel: 2
      fail-fast: false
    steps:
      - name: Fetch vcpkg versions from github
        run: |
          function fetchmeta{
            param ($Package)
            $req = $null
            try {
              $req = Invoke-WebRequest -UseBasicParsing "https://raw.githubusercontent.com/microsoft/vcpkg/master/ports/${Package}/CONTROL"
            }catch{
              $req = Invoke-WebRequest -UseBasicParsing "https://raw.githubusercontent.com/microsoft/vcpkg/master/ports/${Package}/vcpkg.json"
            }
            return $req
          }
          Write-Host "::group::Fetching CONTROL from raw.githubusercontent.com"
          (fetchmeta "gtest").Content > ${{github.workspace}}/.vcpkgvers
          (fetchmeta "openssl").Content >> ${{github.workspace}}/.vcpkgvers
          (fetchmeta "curl").Content >> ${{github.workspace}}/.vcpkgvers
          (fetchmeta "zlib").Content >> ${{github.workspace}}/.vcpkgvers
          Write-Host "::endgroup::"
          Write-Host "::group::Show now vers"
          Get-Content ${{github.workspace}}/.vcpkgvers
          Write-Host "::endgroup::"

      - name: Cache vcpkg
        uses: actions/cache@v2
        id: cache-gtest
        with:
          path: |
            C:\vcpkg\packages\gtest_x64-windows
            C:\vcpkg\packages\openssl_x64-windows
            C:\vcpkg\packages\curl_x64-windows
            C:\vcpkg\packages\zlib_x64-windows
            C:\vcpkg\installed\*
            #C:\vcpkg\buildtrees\openssl
            #C:\vcpkg\buildtrees\curl
            #C:\vcpkg\buildtrees\gtest
            #C:\vcpkg\buildtrees\detect_compiler
            C:\vcpkg\downloads\*
            C:\Users\runneradmin\AppData\Local\vcpkg\archives
          key: Windows-vcpkg-${{ hashFiles('.vcpkgvers') }}

      - name: Install vcpkg dependencies
        shell: cmd
        run: |
          vcpkg install gtest:x64-windows && ^
          vcpkg install openssl:x64-windows && ^
          vcpkg install curl[core,non-http,ssl]:x64-windows

      - name: Checkout libcat sources
        uses: actions/checkout@v2

      - name: Prepare coverage dependencies
        if: matrix.build-type == 'Debug'
        shell: powershell
        run: |
          $headers = @{
            "accept"="application/vnd.github.v3+json";
            "content-type"="application/json";
            "authorization"="Bearer ${{github.token}}";
          }
          # get latest OpenCppCoverage download path
          Write-Host "Fetching latest OpenCppCoverage download path"
          $info = Invoke-WebRequest `
            -UseBasicParsing `
            -Headers $headers `
            -Uri https://api.github.com/repos/OpenCppCoverage/OpenCppCoverage/releases/latest `
              | ConvertFrom-Json
          foreach ($x in $info.assets) {
            if($x.name.EndsWith('.exe')) {
              Write-Host "Downloading latest OpenCppCoverage"
              $uri = $x.browser_download_url
              Invoke-WebRequest -Uri $uri -OutFile OpenCppCoverage.exe -Headers $headers -UseBasicParsing
              break
            }
          }
          # install OpenCppCoverage
          Write-Host "Installing OpenCppCoverage"
          & .\OpenCppCoverage.exe /SP- /NORESTART /VERYSILENT /DIR=C:\OpenCppCoverage
          # get latest codecov uploader download path
          Write-Host "Fetching latest codecov uploader download path"
          $info = Invoke-WebRequest `
            -UseBasicParsing `
            -Headers $headers `
            -Uri https://api.github.com/repos/codecov/codecov-exe/releases/latest `
              | ConvertFrom-Json
          foreach ($x in $info.assets) {
            if($x.name.EndsWith('win7-x64.zip')) {
              Write-Host "Downloading latest codecov uploader"
              $uri = $x.browser_download_url
              Invoke-WebRequest -Uri $uri -OutFile codecov.zip -Headers $headers -UseBasicParsing
              break
            }
          }
          # unzip it
          Write-Host "Extracting codecov uploader"
          New-Item C:\Codecov -ItemType Container | Out-Null
          Expand-Archive .\codecov.zip -DestinationPath C:\Codecov

      - name: Build and test libcat
        shell: cmd
        run: |
          @ECHO OFF
          ECHO ::group::Start MSVC environment
          FOR /F "USEBACKQ DELIMS=" %%i in (`vswhere.exe -prerelease -latest -property installationPath`) do (
            IF EXIST "%%i\VC\Auxiliary\Build\vcvars64.bat" (
              CALL "%%i\VC\Auxiliary\Build\vcvars64.bat"
            ) ELSE ( EXIT /B 1 )
          )
          ECHO ::endgroup::
          ECHO ::group::Create build dir
          MKDIR build || goto error
          ECHO ::endgroup::
          ECHO ::group::Make cmake cache
          cmake . -B build ^
            -DASAN=ON ^
            -DCMAKE_C_FLAGS="/WX" ^
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ^
            -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%\scripts\buildsystems\vcpkg.cmake || goto error
          ECHO ::endgroup::
          ECHO ::group::Build libcat
          cmake --build build -j --target cat_tests -- -nologo -p:Configuration=${{ matrix.build-type }} || goto error
          ECHO ::endgroup::
          ECHO ::group::Test libcat
          REM note: 颜色是不可能有颜色的，只能等gtest做这个功能或者githubactions支持那两个WIN32API
          REM note: ^ yet impossible to add color, we can only wait for github actions support SetConsoleAttribute or gtest support unix color on windows
          IF "Debug" == "${{ matrix.build-type }}" ( "C:\OpenCppCoverage\OpenCppCoverage.exe" ^
            --export_type cobertura:coverage.xml ^
            --sources include ^
            --sources src ^
            --excluded_sources deps ^
            --excluded_sources tests ^
            --cover_children ^
            --excluded_line_regex "\s*else.*" ^
            --excluded_line_regex "\s*\}.*" ^
            --excluded_line_regex "\s*\{\s*" ^
            --modules build\Debug\cat_tests.exe -- ^
            build\Debug\cat_tests.exe --gtest_color=yes || goto error ) ELSE (build\Release\cat_tests.exe --gtest_color=yes || goto error)
          ${{ matrix.build-type == 'Debug' && format('C:\Codecov\codecov -f coverage.xml -t {0}', secrets.CODECOV_TOKEN) || '' }}
          ECHO ::endgroup::
          EXIT /b 0
          REM error condition
          :error
          EXIT /b %errorlevel%

  unix-tests:
    name: Test on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    timeout-minutes: 30
    strategy:
      matrix:
        # should use latest, strange that gh still use 18.04 for libcat/libcat
        os: [ "ubuntu-20.04", "macos-latest" ]
        #os: [ "ubuntu-latest"]
        #os: [ "macos-latest"]
      max-parallel: 2
      fail-fast: false
    steps:
      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{runner.os}}" = "Linux" ]
          then
            sudo apt-get update
            sudo apt-get install -yyq libgtest-dev libcurl4-openssl-dev
          else
            brew install googletest ||
            brew install googletest ||
            brew install googletest
          fi

      - name: Checkout libcat sources
        uses: actions/checkout@v2
        with:
          path: libcat

      - name: Build libcat and Run tests
        shell: bash
        working-directory: libcat
        run: |
          ${{ runner.os == 'macOS' && 'export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"' || '' }}
          echo "::group::Create build dir"
          mkdir -p build && cd build || exit 1
          echo "::endgroup::"
          echo "::group::Make cmake cache"
          cmake .. \
            -DASAN=ON \
            ${{ '' != secrets.CODECOV_TOKEN && '-DCODE_COVERAGE=ON' || '' }} \
            -DCMAKE_C_FLAGS="-Werror" || exit 1
          echo "::endgroup::"
          echo "::group::Build libcat"
          cmake --build . -j --target cat_tests || exit 1
          echo "::endgroup::"
          echo "::group::Test libcat"
          ASAN_OPTIONS=log_path=/tmp/asan.log ./cat_tests --gtest_color=yes || {
            echo "::warning::Test failed"
            echo "ASan log:"
            cat /tmp/asan.log*
            exit 1
          }
          echo "::endgroup::"

      - name: Coverage tests
        working-directory: libcat
        shell: bash
        run: |
          [ x"${{ secrets.CODECOV_TOKEN }}" != x"" ] || {
            echo "No CODECOV_TOKEN set, skipping coverage tests"
            exit 0
          }
          ${{ runner.os == 'macOS' && 'brew install lcov' || 'sudo apt-get install lcov' }} &&
          lcov \
            --capture \
            --directory "." \
            --output-file coverage.info &&
          lcov \
            --extract coverage.info \
              "${{github.workspace}}/libcat/include/*" \
              "${{github.workspace}}/libcat/src/*" \
            --output-file coverage.info &&
          lcov --list coverage.info &&
          curl -s https://codecov.io/bash -o codecov.sh &&
          chmod +x codecov.sh &&
          ./codecov.sh -f coverage.info -t ${{ secrets.CODECOV_TOKEN }}

