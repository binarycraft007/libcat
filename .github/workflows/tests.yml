name: tests

on: [push, pull_request]

jobs:
  win-tests:
    name: Test on ${{matrix.os}} build-type ${{matrix.build-type}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ "windows-latest" ]
        build-type: [ "Debug", "Release"]
        #build-type: [ "Debug" ]
      max-parallel: 2
      fail-fast: false
    steps:
      - name: Get vcpkg GTest version
        shell: bash
        run: |
          vcpkg search gtest | head -n 1 | awk '{print $2}' > .gtestver

      - name: Cache GTest
        uses: actions/cache@v2
        id: cache-gtest
        with:
          path: |
            C:\vcpkg\packages\gtest_x64-windows
            C:\vcpkg\installed\*
            C:\vcpkg\buildtrees\gtest
            C:\vcpkg\buildtrees\detect_compiler
            C:\vcpkg\downloads\*
            C:\Users\runneradmin\AppData\Local\vcpkg\archives
          key: Windows-vcpkg-${{ hashFiles('.gtestver') }}

      - name: Install GTest
        shell: cmd
        run: |
          vcpkg install gtest:x64-windows

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Build and test libcat
        shell: cmd
        run: |
          @ECHO OFF
          ECHO ::group::Create build dir
          MKDIR build && CD build || goto error
          ECHO ::endgroup::
          REM ECHO ::group::Prepare vcvars
          REM FOR /F "TOKENS=* USEBACKQ" %%I IN (`vswhere -property installationPath -latest`) DO CALL "%%I\VC\Auxiliary\Build\vcvars64.bat"  || goto error
          REM ECHO ::endgroup::
          ECHO ::group::Make cmake cache
          cmake .. ^
            -DCMAKE_CXX_FLAGS=/std:c++latest ^
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ^
            -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%\scripts\buildsystems\vcpkg.cmake || goto error
          ECHO ::endgroup::
          ECHO ::group::Build libcat
          cmake --build . -j --target cat_tests -- -nologo -v:d || goto error
          ECHO ::endgroup::
          ECHO ::group::Test libcat
          cmake --build . -j --target libcat_test -- -nologo || goto error
          ECHO ::endgroup::
          :error
          EXIT /b %errorlevel%

  unix-tests:
    name: Test on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "macos-latest" ]
        #os: [ "ubuntu-latest"]
        #os: [ "macos-latest"]
      max-parallel: 2
      fail-fast: false
    steps:
      - name: Checkout GTest
        uses: actions/checkout@v2
        with:
          repository: google/googletest
          path: googletest

      - name: Cache GTest
        uses: actions/cache@v2
        id: gtest-cache
        with:
          path: ${{github.workspace}}/googletest/build
          key: ${{ runner.os }}-gtest-${{ hashFiles('googletest/.git/refs/heads/master') }}
      
      - name: Install GTest
        working-directory: googletest
        run: |
          info()
          {
            printf "\x1b[32;1m[IFO] $1\x1b[0m"
            echo
          }
          err()
          {
            printf "\x1b[32;1m[IFO] $1\x1b[0m" >&2
            echo >&2
          }
          [ x"${{ steps.gtest-cache.outputs.cache-hit }}" != 'xtrue' ] && {
            info "Building gtest"
            cmake -E make_directory build && cd build && 
            cmake .. -DCMAKE_CXX_FLAGS="-std=c++11" -DBUILD_SHARED_LIBS=ON -DBUILD_GMOCK=OFF &&
            cmake --build . -j || {
              err "Failed building gtest"
              exit 1
            }
          }
          info "Installing gtest" &&
          cd ${{github.workspace}}/googletest/build &&
          sudo cmake --build . --target install
      
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          path: libcat

      - name: Build libcat and Run tests
        shell: bash
        working-directory: libcat
        run: |
          echo "::group::Create build dir"
          mkdir -p build && cd build || exit 1
          echo "::endgroup::"
          echo "::group::Make cmake cache"
          cmake .. \
            -DCMAKE_CXX_FLAGS="-std=c++11" \
            ${{ (runner.os == 'Linux' && '' != secrets.CODECOV_TOKEN) && '-DCODE_COVERAGE=ON' || '' }} \
            -DCMAKE_C_FLAGS_DEBUG="-Werror" \
            -DCMAKE_CXX_FLAGS_DEBUG="-Werror" || exit 1
          echo "::endgroup::"
          echo "::group::Build libcat"
          cmake --build . -j --target cat_tests || exit 1
          echo "::endgroup::"
          echo "::group::Test libcat"
          cmake --build . -j --target libcat_test || exit 1
          echo "::endgroup::"

      - name: Coverage tests
        if: runner.os == 'Linux'
        working-directory: libcat
        shell: bash
        run: |
          [ x"${{ secrets.CODECOV_TOKEN }}" != x"" ] || {
            echo "No CODECOV_TOKEN set, skipping coverage tests"
            exit 0
          }
          sudo apt-get install lcov &&
          lcov \
            --capture \
            --directory "." \
            --output-file coverage.info &&
          lcov \
            --extract coverage.info \
              "${{github.workspace}}/libcat/include/*" \
              "${{github.workspace}}/libcat/src/*" \
            --output-file coverage.info &&
          lcov --list coverage.info &&
          curl -s https://codecov.io/bash -o codecov.sh &&
          chmod +x codecov.sh &&
          ./codecov.sh -f coverage.info -t ${{ secrets.CODECOV_TOKEN }}
